name: release-mirrors

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: Release tag (defaults to the tag of the release event)
        required: false

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  FILE_PATH: MaaAssistantArknights/MaaRelease/releases/download

jobs:
  # 以下是获取需上传的版本的信息（如果用户手动输入了 release_tag 则改为使用该值）
  getReleaseTag:
    name: Get release tag
    runs-on: ubuntu-latest
    steps:
      - name: Fetch release info
        id: fetchReleaseInfo
        if: ${{ !inputs.release_tag }}
        run: |
          gh release list --repo 'MaaAssistantArknights/MaaRelease' --limit 10 > ${{ runner.temp }}/release_maa
          echo "-------------"
          echo "Last 10 release:"
          column -t ${{ runner.temp }}/release_maa
          head -n 1 ${{ runner.temp }}/release_maa | awk '{ print $1 }' > ${{ runner.temp }}/config
          echo "-------------"
          echo "config:"
          cat ${{ runner.temp }}/config

          echo "release_tag=$(head -n 1 ${{ runner.temp }}/config)" >> $GITHUB_OUTPUT
    outputs:
      release_tag: ${{ inputs.release_tag || steps.fetchReleaseInfo.outputs.release_tag }}

  # 以下开始是各镜像站上传流程。其中：
  #   1. 每个流程均需使用 actions/checkout 获取复用 workflow 文件；
  #   2. 每个流程均需使用 ./.github/downloadReleaseFiles 下载相关版本文件；
  #   3. 如果是支持 S3 api 的对象存储的话，可以用 ./.github/s3Sync 上传；
  #      其他类型也可以自己写上传脚本；
  #   4. 其中 `!contains(needs.getReleaseTag.outputs.release_tag, '.g')` 代表不上传 alpha 版本。
  # 如果需要新增上传流程，需在下方参考其他上传流程和上方说明添加，并在更下方发版流程里按其说明添加依赖。
  ota_server:
    name: Upload to OTA Server
    runs-on: ubuntu-latest
    needs: getReleaseTag
    # Disable due to no relative secrets
    if: github.repository == 'MaaAssistantArknights/MaaRelease'
    steps:
      - uses: actions/checkout@v3
      - name: Download release files
        id: downloadReleaseFiles
        uses: ./.github/downloadReleaseFiles
        with:
          release_tag: ${{ needs.getReleaseTag.outputs.release_tag }}
          os: windows
          notTempDir: true
      - name: Upload to OTA Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.OTA_SERVER_SSH_HOST }}
          username: ${{ secrets.OTA_SERVER_SSH_USER }}
          key: ${{ secrets.OTA_SERVER_SSH_KEY }}
          source: ${{ steps.downloadReleaseFiles.outputs.dirWithReleaseTag }}
          target: ${{ format('{0}/{1}/{2}', 'OTA', env.FILE_PATH, needs.getReleaseTag.outputs.release_tag) }}
          strip_components: 1

  R2:
    name: Upload to R2
    runs-on: ubuntu-latest
    needs: getReleaseTag
    if: github.repository == 'MaaAssistantArknights/MaaRelease'
    steps:
      - uses: actions/checkout@v3
      - name: Download release files
        id: downloadReleaseFiles
        uses: ./.github/downloadReleaseFiles
        with:
          release_tag: ${{ needs.getReleaseTag.outputs.release_tag }}
          os: windows
      - name: Upload to R2
        uses: ./.github/s3Sync
        with:
          args: --acl public-read --follow-symlinks
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
          AWS_S3_ENDPOINT: ${{ secrets.AWS_S3_ENDPOINT }}
          SOURCE_DIR: ${{ steps.downloadReleaseFiles.outputs.dir }}
          DEST_DIR: ${{ env.FILE_PATH }}

  AnnAngelaCOS:
    name: Upload to AnnAngela's COS and fire webhook
    runs-on: ubuntu-latest
    needs: getReleaseTag
    if: (github.repository == 'MaaAssistantArknights/MaaRelease' || github.repository == 'AnnAngela/MaaRelease') && !contains(needs.getReleaseTag.outputs.release_tag, '.g')
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        id: setup-node
        with:
          node-version: lts/*
          check-latest: true
          # cache: npm
      - name: Download release files
        id: downloadReleaseFiles
        uses: ./.github/downloadReleaseFiles
        with:
          release_tag: ${{ needs.getReleaseTag.outputs.release_tag }}
          os: windows
      - name: Upload to AnnAngela's COS and fire webhook
        run: |
          echo "Installing coscli..."
          gh release download --pattern coscli-linux --dir ${{ runner.temp }}/coscli --clobber --repo tencentyun/coscli
          chmod +x ${{ runner.temp }}/coscli/coscli-linux
          echo "coscli installed."
          touch ~/.cos.yaml
          node .github/AnnAngela/prepare.js
          echo "::group::coscli output"
          ${{ runner.temp }}/coscli/coscli-linux sync ${{ steps.downloadReleaseFiles.outputs.dirWithReleaseTag }} cos://${{ secrets.ANNANGELA_COS_BUCKET }}/MaaRelease --recursive -e cos.accelerate.myqcloud.com -i ${{ secrets.ANNANGELA_COS_SECRET_ID }} -k ${{ secrets.ANNANGELA_COS_SECRET_KEY }}
          echo "::endgroup::"
          node .github/AnnAngela/webhook.js
        env:
          WEBHOOK_URL: https://webhook.annangela.cn/custom?from=MaaRelease
          WEBHOOK_SECRET: ${{ secrets.ANNANGELA_WEBHOOK_SECRET }}
          release_tag: ${{ needs.getReleaseTag.outputs.release_tag }}

  MAA_S3:
    name: Upload to MAA S3
    runs-on: ubuntu-latest
    needs: getReleaseTag
    if: github.repository == 'MaaAssistantArknights/MaaRelease'
    steps:
      - uses: actions/checkout@v3
      - name: Download release files
        id: downloadReleaseFiles
        uses: ./.github/downloadReleaseFiles
        with:
          release_tag: ${{ needs.getReleaseTag.outputs.release_tag }}
          os: windows
      - name: Upload to MAA S3
        uses: ./.github/s3Sync
        with:
          args: --acl public-read --follow-symlinks
          AWS_S3_BUCKET: ${{ secrets.MAA_MINIO_RELEASE_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.MAA_MINIO_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.MAA_MINIO_SECRET_KEY }}
          AWS_REGION: us-east-1
          AWS_S3_ENDPOINT: ${{ secrets.MAA_MINIO_ENDPOINT }}
          SOURCE_DIR: ${{ steps.downloadReleaseFiles.outputs.dir }}
          DEST_DIR: ${{ env.FILE_PATH }}

  R2_MAC:
    name: Upload to R2 mac
    runs-on: macos-13
    needs: getReleaseTag
    if: github.repository == 'MaaAssistantArknights/MaaRelease' && !contains(needs.getReleaseTag.outputs.release_tag, '.g')
    steps:
      - uses: actions/checkout@v3
      - name: Download release files
        id: downloadReleaseFiles
        uses: ./.github/downloadReleaseFiles
        with:
          release_tag: ${{ needs.getReleaseTag.outputs.release_tag }}
          os: macos
      - name: Install Rclone
        run: brew install rclone
      - name: Upload Appcast Packages
        env:
          RCLONE_CONFIG_MAA_TYPE: s3
          RCLONE_CONFIG_MAA_PROVIDER: Cloudflare
          RCLONE_CONFIG_MAA_ACCESS_KEY_ID: ${{ secrets.R2_MAC_KEY_ID }}
          RCLONE_CONFIG_MAA_SECRET_ACCESS_KEY: ${{ secrets.R2_MAC_ACCESS_KEY }}
          RCLONE_CONFIG_MAA_ENDPOINT: ${{ secrets.R2_MAC_ENDPOINT }}
        run: |
          rclone sync ${{ steps.downloadReleaseFiles.outputs.dirWithReleaseTag }} MAA:maa-release/macos
          rclone delete MAA:maa-release/macos --min-age 90d

  # 以下是发版流程，通过触发生成 maa version api 文件的 workflow 发版，。
  # 如果新增了上传流程，除非是像 macOS 一样自行维护发版渠道，
  # 或是 MAA S3 那样上传过久难以等待，否则都应在 needs 里添加新的上传流程的 job id，
  # 避免尚未完成上传就发版导致错误码激增。
  # 最后，新增完上传流程后，除非是像 macOS 一样自行维护发版渠道，
  # 否则都需要到 MaaAssistantArknights/update_version.py 新增镜像地址生成。
  updateVersionApi:
    name: Dispatch the "update_version_api" workflow
    runs-on: ubuntu-latest
    if: always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
      - ota_server
      - R2
      - AnnAngelaCOS
      # - MAA_S3 # 太慢了不等他
      # - R2_MAC # 是通过自有渠道发版，不经过 version api
    steps:
      - name: Dispatch the "update_version_api" workflow
        run: gh workflow run update_version_api --repo ${{ github.repository }}
