name: Download release files

description: Download release files

branding:
  icon: type
  color: purple

inputs:
  release_tag:
    description: the release tag
    required: true
  os:
    description: the os for ota, "windows" or "macos"
    required: true

runs:
  using: composite
  steps:
    - name: Download release files
      shell: bash
      run: |
        if [ "${{ inputs.os }}" = "windows" ]; then
          export PATTERN=*.zip
        else
          export PATTERN="*.dmg *.delta *.xml"
        fi

        echo "pattern: $PATTERN"

        mkdir -pv upload-dir/${{ inputs.release_tag }}

        download_release_files() {
          repo="$1"

          tmpfile=$(mktemp --suffix=downloadReleaseFiles -p ${{ runner.temp }})

          if ! gh release download ${{ inputs.release_tag }} --repo "MaaAssistantArknights/$repo" --pattern "$PATTERN" --clobber --dir upload-dir/${{ inputs.release_tag }} 2>"$tmpfile"; then
            error=$(cat "$tmpfile")
            if [ "$error" = "release not found" ]; then
              echo "Release ${{ inputs.release_tag }} not found in $repo"
            else
              echo "$error"
            exit 1
            fi
            rm -f "$tmpfile"
          fi
        }

        echo "Start to download release files from MaaRelease..."
        download_release_files 'MaaRelease'
        echo "Start to download release files from MaaAssistantArknights..."
        download_release_files 'MaaAssistantArknights'

        if [ -d "upload-dir/${{ inputs.release_tag }}" ] && [ "$(ls -A "upload-dir/${{ inputs.release_tag }}")" ]; then
          echo "Done, folder view:"
          ls -lhA upload-dir/${{ inputs.release_tag }}
        else
          echo "Failed, no release downloaded."
          exit 1
        fi

outputs:
  dir:
    description: dir for the release
    value: upload-dir
  dirWithReleaseTag:
    description: dir for the release, with release tag
    value: upload-dir/${{ inputs.release_tag }}
