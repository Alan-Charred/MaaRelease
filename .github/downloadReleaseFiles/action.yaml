name: Download release files

description: Download release files

branding:
  icon: type
  color: purple

inputs:
  release_tag:
    description: the release tag
    required: true
  os:
    description: the os for ota, "windows" or "macos"
    required: true
  notTempDir:
    description: When set to "true", disables the use of temp dir to prevent potential failures in subsequent Docker actions.
    required: false
    default: "false"

runs:
  using: composite
  steps:
    - name: Download release files
      id: downloadReleaseFiles
      shell: bash
      env:
        TMPDIR: ${{ runner.temp }}
      run: |
        logDivider() {
          echo "-------------"
        }

        logDivider

        if [ "${{ inputs.notTempDir }}" = "true" ]; then
          export DOWNLOAD_DIR="upload-dir"
        else
          export DOWNLOAD_DIR="${{ runner.temp }}/upload-dir"
        fi

        export DOWNLOAD_DIR_WITH_RELEASE_TAG="$DOWNLOAD_DIR/${{ inputs.release_tag }}"

        echo "DOWNLOAD_DIR=$DOWNLOAD_DIR" >> $GITHUB_OUTPUT
        echo "DOWNLOAD_DIR_WITH_RELEASE_TAG=$DOWNLOAD_DIR_WITH_RELEASE_TAG" >> $GITHUB_OUTPUT

        echo "dir: $DOWNLOAD_DIR"
        echo "dirWithReleaseTag: $DOWNLOAD_DIR_WITH_RELEASE_TAG"

        export OS='${{ inputs.os }}'
        echo "OS: $OS"

        export PATTERN=""
        if [[ $OS == *windows* ]]; then
          export PATTERN="$PATTERN --pattern '*-win-*'"
        fi
        if [[ $OS == *macos* ]]; then
          export PATTERN="$PATTERN --pattern '*.delta' --pattern 'appcast.xml' --pattern '*-macos-*.dmg'"
        fi
        if [[ $OS == *linux* ]]; then
          export PATTERN="$PATTERN --pattern '*-linux-*'"
        fi

        echo "pattern: $PATTERN"

        logDivider

        mkdir -pv $DOWNLOAD_DIR_WITH_RELEASE_TAG

        download_release_files() {
          repo="$1"

          tmpfile=$(mktemp)

          if ! gh release download ${{ inputs.release_tag }} --repo "MaaAssistantArknights/$repo" $PATTERN --clobber --dir $DOWNLOAD_DIR_WITH_RELEASE_TAG 2>"$tmpfile"; then
            error=$(cat "$tmpfile")
            rm -f "$tmpfile"

            if [ "$error" = "release not found" ]; then
              echo "  Release ${{ inputs.release_tag }} not found in $repo, skipped."
              return
            else
              echo "$error"
              exit 1
            fi
          fi

          echo '  Download completed, fetching the "createdAt" attr...'

          created_at=$(gh release view ${{ inputs.release_tag }} --repo "MaaAssistantArknights/$repo" --json createdAt -q '.createdAt')

          echo "  The release is created at $created_at, start to get the list of the release files ..." 

          list=$(gh release view ${{ inputs.release_tag }} --repo "MaaAssistantArknights/$repo" --json assets -q '.assets.[].name')

          echo '  Start to change the times of release files in the list...'

          echo "::group::download_release_files change the times of release files from MaaAssistantArknights/$repo."
          while IFS= read -r filename; do
            filenameWithPath="$DOWNLOAD_DIR_WITH_RELEASE_TAG/$filename"
            if [ -e "$filenameWithPath" ]; then
              echo "    Start to change the modify time of $filename from $(stat -c '%y' $filenameWithPath) to $created_at."
              touch -d "$created_at" "$filenameWithPath"
              echo "    The new modify time of $filename is $(stat -c '%y' $filenameWithPath)."
              printf "\n"
            fi
          done <<< "$list"
          echo "::endgroup::"

          echo '  Done.'
        }

        logDivider

        echo "Start to download release files from MaaRelease..."
        download_release_files 'MaaRelease'

        logDivider

        echo "Start to download release files from MaaAssistantArknights..."
        download_release_files 'MaaAssistantArknights'

        logDivider

        if [ -d "$DOWNLOAD_DIR_WITH_RELEASE_TAG" ] && [ "$(ls -A "$DOWNLOAD_DIR_WITH_RELEASE_TAG")" ]; then
          echo "Download complete."
          echo "Done, folder view:"
          ls -lhA $DOWNLOAD_DIR_WITH_RELEASE_TAG
        else
          echo "Failed, no release downloaded."
          exit 1
        fi

outputs:
  dir:
    description: dir for the release
    value: ${{ steps.downloadReleaseFiles.outputs.DOWNLOAD_DIR }}
  dirWithReleaseTag:
    description: dir for the release, with release tag
    value: ${{ steps.downloadReleaseFiles.outputs.DOWNLOAD_DIR_WITH_RELEASE_TAG }}
